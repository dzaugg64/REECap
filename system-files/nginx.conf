upstream reecap_backend {
    ip_hash; # Sticky sessions pour assigner chaque utilisateur à un worker spécifique
    server 127.0.0.1:5000; # Backend Flask
}

upstream websocket_backend {
    ip_hash; # Sticky sessions pour assigner chaque utilisateur à un worker spécifique
    server 127.0.0.1:6000; # Backend Flask
}

server {
    listen 80; # Listen for HTTP traffic on port 80

    server_name reecap.daniel-zaugg.ch; # Specify the domain name for this server block

    root /home/reecap/reecap/html; # Set the root directory for serving static files
    # root /var/www/html;
    index index.html; # Default file to serve if no file is specified

    client_max_body_size 100M; # Allow uploads with a size limit of 100MB

    location / {
        try_files $uri $uri/ =404; # Attempt to serve the requested file or directory, else return 404
    }

    location /translations.json {
        default_type application/json; # Set the MIME type to JSON for this file
        try_files $uri =404; # Attempt to serve the file, else return 404
    }

    location /process {
        proxy_pass http://reecap_backend; # Forward requests to the Flask backend at localhost:5000
        proxy_set_header Host $host; # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr; # Forward the real client IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Forward any prior proxy IPs
        proxy_set_header X-Forwarded-Proto $scheme; # Forward the original protocol (HTTP or HTTPS)
        proxy_read_timeout 600s; # Allow up to 600 seconds for the backend to respond
        proxy_connect_timeout 600s; # Allow up to 600 seconds to establish a connection to the backend
        proxy_send_timeout 600s; # Allow up to 600 seconds to send data to the backend
    }

    location /get-file {
        proxy_pass http://reecap_backend; # Forward requests to the Flask backend at localhost:5000
        proxy_set_header Host $host; # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr; # Forward the real client IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Forward any prior proxy IPs
        proxy_set_header X-Forwarded-Proto $scheme; # Forward the original protocol (HTTP or HTTPS)
        proxy_read_timeout 60s; # Allow up to 60 seconds for the backend to respond
        proxy_connect_timeout 60s; # Allow up to 60 seconds to establish a connection to the backend
        proxy_send_timeout 60s; # Allow up to 60 seconds to send data to the backend
    }

    location /feedback {
        proxy_pass http://websocket_backend; # Forward WebSocket requests to the Flask backend
        proxy_http_version 1.1; # Use HTTP/1.1 to support WebSocket connections
        proxy_set_header Upgrade $http_upgrade; # Upgrade the connection to a WebSocket
        proxy_set_header Connection "upgrade"; # Indicate the connection should be upgraded
        proxy_set_header Host $host; # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr; # Forward the real client IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Forward any prior proxy IPs
        proxy_cache_bypass $http_upgrade; # Bypass caching for WebSocket connections
        proxy_read_timeout 610s; # Increase timeout for long-lived WebSocket connections
        proxy_send_timeout 610s; # Increase timeout for long-lived WebSocket connections
        proxy_connect_timeout 610s; # Increase connection timeout
    }
}